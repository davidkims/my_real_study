name: Retryable Secure Swift + .NET Workflow

on:
  workflow_dispatch:

jobs:
  secure-build:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        attempt: [1]  # Ï≤´ ÏãúÎèÑÎäî 1 ‚Üí ÎÇòÏ§ëÏóê ÎèôÏ†Å retryÎ°ú Î∞òÎ≥µ Í∞ÄÎä•

    steps:
      - name: ‚¨áÔ∏è Checkout Repository
        uses: actions/checkout@v4

      - name: üóÉ Create Working Directories
        run: |
          mkdir Project
          mkdir Project/logs
          mkdir Project/reports
          mkdir Project/swiftapp
          echo "" > Project/logs/failures.log
          dotnet new console --output Project/src --framework net6.0
        shell: pwsh

      - name: ‚öôÔ∏è Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '6.x'

      - name: ‚öôÔ∏è Setup NuGet
        uses: nuget/setup-nuget@v1

      - name: ‚öôÔ∏è Setup MSBuild
        uses: microsoft/setup-msbuild@v1.0.2

      - name: üì¶ Attempt Swift Install (Skip on 404)
        id: swift-install
        run: |
          try {
            $url = "https://download.swift.org/swift-6.1.1-release/swift-6.1.1-RELEASE-windows10.exe"
            $exe = "$env:RUNNER_TEMP\swift-installer.exe"
            Invoke-WebRequest -Uri $url -OutFile $exe -ErrorAction Stop
            Start-Process -FilePath $exe -ArgumentList "/quiet" -Wait
            echo "SWIFT_INSTALLED=true" >> $env:GITHUB_ENV
          } catch {
            Add-Content -Path Project/logs/failures.log -Value "Swift installation failed"
            echo "SWIFT_INSTALLED=false" >> $env:GITHUB_ENV
          }
        shell: powershell
        continue-on-error: true

      - name: ‚ûï Set Swift PATH (If Installed)
        run: |
          if ($env:SWIFT_INSTALLED -eq "true") {
            $path = Get-ChildItem -Directory "C:\Library\Developer\Toolchains" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
            if ($path) {
              echo "##[add-path]$($path.FullName)\usr\bin"
            } else {
              Add-Content -Path Project/logs/failures.log -Value "Swift path not found"
            }
          }
        shell: powershell
        continue-on-error: true

      - name: ‚úÖ Confirm Swift (Skip on fail)
        run: |
          if ($env:SWIFT_INSTALLED -eq "true") {
            try {
              swift --version
            } catch {
              Add-Content -Path Project/logs/failures.log -Value "Swift version check failed"
            }
          }
        shell: pwsh
        continue-on-error: true

      - name: üßæ Create & Run Swift App (Skip on fail)
        run: |
          if ($env:SWIFT_INSTALLED -eq "true") {
            cd Project/swiftapp
            swift package init --type executable
            Set-Content -Path "Sources/swiftapp/main.swift" -Value 'print("‚úÖ Hello from Swift!")'
            try {
              swift build
              swift run
            } catch {
              Add-Content -Path ../logs/failures.log -Value "Swift app build/run failed"
            }
          }
        shell: pwsh
        continue-on-error: true

      - name: üîç Add SecurityCodeScan Analyzer
        uses: security-code-scan/security-code-scan-add-action@f8ff4f2763ed6f229eded80b1f9af82ae7f32a0d
        with:
          solution-or-project: ./Project/src/Project.csproj

      - name: üì¶ Restore .NET Dependencies
        run: dotnet restore ./Project/src/Project.csproj
        shell: pwsh

      - name: üèó Build .NET Project
        run: dotnet build ./Project/src/Project.csproj --no-restore
        shell: pwsh

      - name: üìÑ Convert Security Scan Results to SARIF
        uses: security-code-scan/security-code-scan-results-action@cdb3d5e639054395e45bf401cba8688fcaf7a687
        with:
          project: ./Project/src/Project.csproj
          output: ./Project/reports/security-scan-results.sarif

      - name: ‚òÅÔ∏è Upload SARIF to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ./Project/reports/security-scan-results.sarif

      - name: üìã Show Failures and Retry Command
        run: |
          $log = Get-Content Project/logs/failures.log
          if ($log.Trim()) {
            Write-Host "‚ùå Failures occurred:"
            Write-Host $log
            if (${env:attempt} -lt 999) {
              echo "RETRY_NEEDED=true" >> $env:GITHUB_ENV
            }
          } else {
            Write-Host "‚úÖ All steps completed successfully"
          }
        shell: pwsh

  retry-if-failed:
    needs: secure-build
    if: ${{ env.RETRY_NEEDED == 'true' }}
    runs-on: windows-latest
    steps:
      - name: üîÅ Re-dispatch workflow up to 999 times
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: retry-secure-build
