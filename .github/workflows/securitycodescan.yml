name: Retryable Secure Swift + .NET Workflow

on:
  workflow_dispatch:

jobs:
  secure-build:
    runs-on: windows-latest
    outputs:
      retry: ${{ steps.detect-failures.outputs.retry }}
      attempt: ${{ steps.set-attempt.outputs.attempt }}
    steps:
      - name: ⬇️ Checkout Repository
        uses: actions/checkout@v4

      - name: 📁 Setup Directories
        run: |
          mkdir Project
          mkdir Project/logs
          mkdir Project/reports
          mkdir Project/swiftapp
          echo "" > Project/logs/failures.log
          dotnet new console --output Project/src --framework net6.0
        shell: pwsh

      - name: 🔍 Locate .csproj file
        id: locate-csproj
        run: |
          $csproj = Get-ChildItem -Path Project/src -Filter *.csproj | Select-Object -First 1
          if (-not $csproj) {
            echo "❌ .csproj file not found in Project/src" | Out-File -Append Project/logs/failures.log
            exit 1
          }

      - name: ⚙️ Setup NuGet
        uses: nuget/setup-nuget@v1

      - name: ⚙️ Setup MSBuild
        uses: microsoft/setup-msbuild@v1.0.2

      - name: 📦 Try Swift Install (Skip on Fail)
        id: swift-install
        run: |
          try {
            $url = "https://download.swift.org/swift-5.9.2-release/swift-5.9.2-RELEASE-windows10.exe"
            $exe = "$env:RUNNER_TEMP\\swift-installer.exe"
            Invoke-WebRequest -Uri $url -OutFile $exe -ErrorAction Stop
            Start-Process -FilePath $exe -ArgumentList "/quiet" -Wait
            echo "SWIFT_INSTALLED=true" >> $env:GITHUB_ENV
          } catch {
            echo "SWIFT_INSTALLED=false" >> $env:GITHUB_ENV
            Add-Content -Path Project/logs/failures.log -Value "Swift install failed"
          }
        shell: powershell
        continue-on-error: true

      - name: ➕ Add Swift to PATH (If Installed)
        run: |
          if ($env:SWIFT_INSTALLED -eq "true") {
            $toolchain = Get-ChildItem -Directory "C:\\Library\\Developer\\Toolchains" | Sort-Object LastWriteTime -Descending | Select-Object -First 1
            if ($toolchain) {
              echo "##[add-path]$($toolchain.FullName)\\usr\\bin"
            } else {
              Add-Content -Path Project/logs/failures.log -Value "Swift toolchain not found"
            }
          }
        shell: powershell
        continue-on-error: true

      - name: 🧾 Create & Run Swift Project
        run: |
          if ($env:SWIFT_INSTALLED -eq "true") {
            cd Project/swiftapp
            swift package init --type executable
            echo 'print("Hello from Swift!")' > Sources/swiftapp/main.swift
            try {
              swift build
              swift run
            } catch {
              Add-Content -Path ../logs/failures.log -Value "Swift run failed"
            }
          }
        shell: pwsh
        continue-on-error: true

      - name: 🔍 Add SCS Analyzer
        uses: security-code-scan/security-code-scan-add-action@v1
        with:
          solution-or-project: ./Project/src/Project.csproj

      - name: 📦 Restore .NET
        run: |
          if (Test-Path ./Project/src/Project.csproj) {
            dotnet restore ./Project/src/Project.csproj
          } else {
            Write-Host "⚠️ Project.csproj not found. Skipping restore."
            Add-Content -Path Project/logs/failures.log -Value "Project.csproj missing for restore"
          }
        shell: pwsh

      - name: 🏗 Build .NET
        run: |
          if (Test-Path ./Project/src/Project.csproj) {
            dotnet build ./Project/src/Project.csproj --no-restore
          } else {
            Write-Host "⚠️ Project.csproj not found. Skipping build."
            Add-Content -Path Project/logs/failures.log -Value "Project.csproj missing for build"
          }
        shell: pwsh

      - name: 📄 Convert to SARIF
        uses: security-code-scan/security-code-scan-results-action@v1
        with:
          project: ./Project/src/Project.csproj
          output: ./Project/reports/security.sarif

      - name: ☁️ Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ./Project/reports/security.sarif

      - name: 📋 Detect Failures
        id: detect-failures
        run: |
          $log = Get-Content Project/logs/failures.log
          if ($log.Trim()) {
            echo "retry=true" >> $env:GITHUB_OUTPUT
          } else {
            echo "retry=false" >> $env:GITHUB_OUTPUT
          }
        shell: pwsh

      - name: 🔢 Set Attempt Counter
        id: set-attempt
        run: echo "attempt=1" >> $env:GITHUB_OUTPUT

  retry-if-needed:
    needs: secure-build
    if: ${{ needs.secure-build.outputs.retry == 'true' && needs.secure-build.outputs.attempt < '999' }}
    runs-on: windows-latest
    steps:
      - name: 🔁 Re-dispatch This Workflow
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: Retryable Secure Swift + .NET Workflow
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 📬 Notify Slack
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "🔁 Swift/.NET workflow failed and retry triggered (attempt ${{ needs.secure-build.outputs.attempt }})"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 📧 Notify Email
        run: echo "Swift/.NET Workflow failed on attempt ${{ needs.secure-build.outputs.attempt }}" | mail -s "Workflow Retry Alert" your@email.com
        shell: bash

      - name: 🔙 Auto Rollback (if needed)
        run: |
          git checkout main
          git reset --hard HEAD~1
          git push --force
        shell: bash
        if: ${{ needs.secure-build.outputs.attempt == '999' }}
