name: CMake Cross-Platform Build + Artifacts + Report

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Clang (Linux)
      if: matrix.c_compiler == 'clang' && runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y clang lldb lld libc++-dev libc++abi-dev

    - name: Create build slot and files (Linux)
      if: runner.os != 'Windows'
      shell: bash
      run: |
        SLOT_DIR="disk-slot/slot-$(date +%Y%m%d-%H%M%S)"
        mkdir -p "$SLOT_DIR/cmake_project" "$SLOT_DIR/db"
        echo "$SLOT_DIR" > slot-dir.txt

        echo 'cmake_minimum_required(VERSION 3.10)' > "$SLOT_DIR/cmake_project/CMakeLists.txt"
        echo 'project(HelloWorld)' >> "$SLOT_DIR/cmake_project/CMakeLists.txt"
        echo 'enable_testing()' >> "$SLOT_DIR/cmake_project/CMakeLists.txt"
        echo 'add_executable(hello main.cpp)' >> "$SLOT_DIR/cmake_project/CMakeLists.txt"
        echo 'add_test(NAME HelloTest COMMAND hello)' >> "$SLOT_DIR/cmake_project/CMakeLists.txt"

        echo '#include <iostream>' > "$SLOT_DIR/cmake_project/main.cpp"
        echo 'int main() { std::cout << "Hello, world!\\n"; return 0; }' >> "$SLOT_DIR/cmake_project/main.cpp"

        echo 'CREATE TABLE users(id INTEGER PRIMARY KEY, name TEXT, email TEXT);' > "$SLOT_DIR/db/init.sql"
        echo "INSERT INTO users VALUES(1, 'Alice', 'alice@example.com');" >> "$SLOT_DIR/db/init.sql"
        echo "INSERT INTO users VALUES(2, 'Bob', 'bob@example.com');" >> "$SLOT_DIR/db/init.sql"

        echo "slot-dir=$SLOT_DIR" >> "$GITHUB_ENV"

    - name: Create build slot and files (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $timestamp = Get-Date -Format "yyyyMMdd-HHmmss"
        $slotDir = "disk-slot/slot-$timestamp"
        New-Item -ItemType Directory -Path "$slotDir/cmake_project" -Force | Out-Null
        New-Item -ItemType Directory -Path "$slotDir/db" -Force | Out-Null

        Set-Content -Path "$slotDir/cmake_project/CMakeLists.txt" -Value @(
          'cmake_minimum_required(VERSION 3.10)',
          'project(HelloWorld)',
          'enable_testing()',
          'add_executable(hello main.cpp)',
          'add_test(NAME HelloTest COMMAND hello)'
        )

        Set-Content -Path "$slotDir/cmake_project/main.cpp" -Value @(
          '#include <iostream>',
          'int main() { std::cout << "Hello, world!\n"; return 0; }'
        )

        Set-Content -Path "$slotDir/db/init.sql" -Value @(
          'CREATE TABLE users(id INTEGER PRIMARY KEY, name TEXT, email TEXT);',
          "INSERT INTO users VALUES(1, 'Alice', 'alice@example.com');",
          "INSERT INTO users VALUES(2, 'Bob', 'bob@example.com');"
        )

        echo "slot-dir=$slotDir" >> $env:GITHUB_ENV

    - name: Install SQLite3 (Linux only)
      if: runner.os != 'Windows'
      run: sudo apt-get install -y sqlite3

    - name: Init SQLite DB (Linux only)
      if: runner.os != 'Windows'
      run: |
        sqlite3 ${{ env.slot-dir }}/db/test.db < ${{ env.slot-dir }}/db/init.sql
        sqlite3 ${{ env.slot-dir }}/db/test.db "SELECT * FROM users;"

    - name: Set build dir
      id: vars
      shell: bash
      run: echo "build-dir=${{ env.slot-dir }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.vars.outputs.build-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ env.slot-dir }}/cmake_project

    - name: Build
      run: cmake --build ${{ steps.vars.outputs.build-dir }} --config ${{ matrix.build_type }}

    - name: Run Tests
      working-directory: ${{ steps.vars.outputs.build-dir }}
      run: ctest --build-config ${{ matrix.build_type }} --output-on-failure

    - name: üì¶ Zip disk-slot contents (Linux)
      if: runner.os != 'Windows'
      run: |
        cd disk-slot
        zip -r "../disk-slot-${{ matrix.os }}-${{ matrix.c_compiler }}.zip" .
        cd ..

    - name: üì¶ Zip disk-slot contents (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $archive = "disk-slot-${{ matrix.os }}-${{ matrix.c_compiler }}.zip"
        Compress-Archive -Path "disk-slot\*" -DestinationPath $archive -Force

    - name: üì§ Upload zip artifact
      uses: actions/upload-artifact@v4
      with:
        name: disk-slot-${{ matrix.os }}-${{ matrix.c_compiler }}
        path: disk-slot-${{ matrix.os }}-${{ matrix.c_compiler }}.zip
        if-no-files-found: ignore
        compression-level: 6
        overwrite: true

    - name: üîç YAML Ïò§Î•ò Î∂ÑÏÑù Î≥¥Í≥†ÏÑú ÏÉùÏÑ± (Linux)
      if: runner.os == 'Linux'
      run: |
        mkdir -p reports
        echo "# ÏõåÌÅ¨ÌîåÎ°úÏö∞ YAML Î¨∏Î≤ï Ïò§Î•ò Î≥¥Í≥†ÏÑú" > reports/workflow_report.md
        echo "Î∂ÑÏÑù ÎåÄÏÉÅ ÎîîÎ†âÌÜ†Î¶¨: .github/workflows" >> reports/workflow_report.md
        echo "ÏûëÏÑ± ÏãúÍ∞Ñ: $(date)" >> reports/workflow_report.md
        echo "" >> reports/workflow_report.md
        yamllint .github/workflows > reports/yaml-check.log || true
        cat reports/yaml-check.log >> reports/workflow_report.md
        echo "" >> reports/workflow_report.md
        echo "‚úÖ Î≥¥Í≥†ÏÑú ÏÉùÏÑ± ÏôÑÎ£å"

    - name: üì§ ÏóÖÎ°úÎìú - YAML Ïò§Î•ò Î≥¥Í≥†ÏÑú
      if: runner.os == 'Linux'
      uses: actions/upload-artifact@v4
      with:
        name: workflow-yaml-error-report
        path: reports/workflow_report.md
