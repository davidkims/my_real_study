name: CMake on multiple platforms with Setup and DB

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Clang (Linux only)
      if: matrix.c_compiler == 'clang' && runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y clang lldb lld libc++-dev libc++abi-dev

    - name: Prepare disk slot with files and DB
      run: |
        export SLOT_DIR=disk-slot/slot-$(date +%Y%m%d-%H%M%S)
        mkdir -p $SLOT_DIR/{install,cmake_project,db}
        echo "ðŸ”¹ SLOT_DIR=$SLOT_DIR"

        # CMakeLists.txt
        cat <<EOF > $SLOT_DIR/cmake_project/CMakeLists.txt
        cmake_minimum_required(VERSION 3.10)
        project(HelloWorld)
        enable_testing()
        add_executable(hello main.cpp)
        add_test(NAME HelloTest COMMAND hello)
        EOF

        # main.cpp
        cat <<EOF > $SLOT_DIR/cmake_project/main.cpp
        #include <iostream>
        int main() {
            std::cout << "Hello, world!" << std::endl;
            return 0;
        }
        EOF

        # SQL Script
        cat <<EOF > $SLOT_DIR/db/init.sql
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT NOT NULL,
            email TEXT UNIQUE NOT NULL
        );
        INSERT INTO users (name, email) VALUES ('Alice', 'alice@example.com');
        INSERT INTO users (name, email) VALUES ('Bob', 'bob@example.com');
        EOF

        # Save slot path
        echo "slot-dir=$SLOT_DIR" >> "$GITHUB_ENV"

    - name: Install SQLite3
      if: runner.os == 'Linux'
      run: sudo apt-get install -y sqlite3

    - name: Initialize SQLite DB
      if: runner.os == 'Linux'
      run: |
        sqlite3 ${{ env.slot-dir }}/db/test.db < ${{ env.slot-dir }}/db/init.sql
        echo "âœ… DB initialized:"
        sqlite3 ${{ env.slot-dir }}/db/test.db "SELECT * FROM users;"

    - name: Set build dir
      id: vars
      run: echo "build-dir=${{ env.slot-dir }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.vars.outputs.build-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ env.slot-dir }}/cmake_project

    - name: Build
      run: cmake --build ${{ steps.vars.outputs.build-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.vars.outputs.build-dir }}
      run: ctest --build-config ${{ matrix.build_type }} --output-on-failure
