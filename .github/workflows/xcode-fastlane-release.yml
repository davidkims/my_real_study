name: iOS Fastlane Build with Release Notes

on:
  push:
    branches: [main]

permissions:
  contents: write
  packages: write

jobs:
  ios-build:
    runs-on: macos-13
    timeout-minutes: 90
    env:
      LANG: en_US.UTF-8
      LC_ALL: en_US.UTF-8
      S3_KEY_PREFIX: ios_builds/${{ github.run_id }}

    steps:
      - name: ✅ Checkout Code
        uses: actions/checkout@v4

      - name: 📂 Debug File Structure
        run: |
          echo "📍 Current path: $(pwd)"
          echo "🔍 Contents:"
          ls -al
          echo "--- ./ios ---"
          ls -al ios || echo "❌ no ./ios"
          echo "--- ./MyApp ---"
          ls -al MyApp || echo "❌ no ./MyApp"

      - name: 🔍 Detect Xcode Project Directory
        run: |
          set -e
          for dir in . ./ios ./MyApp ./source; do
            if ls "$dir"/*.xcodeproj >/dev/null 2>&1 || ls "$dir"/*.xcworkspace >/dev/null 2>&1; then
              echo "✅ Found Xcode project in: $dir"
              echo "PROJECT_DIR=$dir" >> $GITHUB_ENV
              exit 0
            fi
          done
          echo "❌ No .xcodeproj or .xcworkspace found"
          exit 1

      - name: 🔒 Prepare Directories
        run: |
          mkdir -p build_output logs artifacts
          chmod 700 build_output logs artifacts

      - name: 💎 Install Ruby and Fastlane
        run: |
          brew install rbenv ruby-build gh
          eval "$(rbenv init - bash)"
          rbenv install -s 3.2.2
          rbenv global 3.2.2
          gem install bundler fastlane

      - name: 📝 Auto-generate Fastfile with version bump
        run: |
          mkdir -p "$PROJECT_DIR/fastlane"
          echo "default_platform(:ios)" > "$PROJECT_DIR/fastlane/Fastfile"
          echo "platform :ios do" >> "$PROJECT_DIR/fastlane/Fastfile"
          echo "  desc \"Build the app\"" >> "$PROJECT_DIR/fastlane/Fastfile"
          echo "  lane :build_app do" >> "$PROJECT_DIR/fastlane/Fastfile"
          echo "    increment_build_number" >> "$PROJECT_DIR/fastlane/Fastfile"
          echo "    build_app(" >> "$PROJECT_DIR/fastlane/Fastfile"
          echo "      scheme: \"MyApp\"," >> "$PROJECT_DIR/fastlane/Fastfile"
          echo "      export_method: \"app-store\"," >> "$PROJECT_DIR/fastlane/Fastfile"
          echo "      output_directory: \"build_output\"" >> "$PROJECT_DIR/fastlane/Fastfile"
          echo "    )" >> "$PROJECT_DIR/fastlane/Fastfile"
          echo "  end" >> "$PROJECT_DIR/fastlane/Fastfile"
          echo "  desc \"Upload to TestFlight\"" >> "$PROJECT_DIR/fastlane/Fastfile"
          echo "  lane :upload_to_testflight do" >> "$PROJECT_DIR/fastlane/Fastfile"
          echo "    upload_to_testflight" >> "$PROJECT_DIR/fastlane/Fastfile"
          echo "  end" >> "$PROJECT_DIR/fastlane/Fastfile"
          echo "  desc \"Tag and Release\"" >> "$PROJECT_DIR/fastlane/Fastfile"
          echo "  lane :tag_release do" >> "$PROJECT_DIR/fastlane/Fastfile"
          echo "    add_git_tag" >> "$PROJECT_DIR/fastlane/Fastfile"
          echo "  end" >> "$PROJECT_DIR/fastlane/Fastfile"
          echo "end" >> "$PROJECT_DIR/fastlane/Fastfile"

      - name: 🛠 Build with Fastlane
        run: |
          cd "$PROJECT_DIR"
          fastlane build_app
          echo "📦 IPA Files:"
          ls -al build_output

      - name: ☁️ Upload to TestFlight (Optional)
        run: |
          cd "$PROJECT_DIR"
          if [ -f ~/.appstoreconnect/api_key.json ]; then
            fastlane upload_to_testflight || echo "⚠️ TestFlight upload failed"
          else
            echo "⚠️ Skipping TestFlight upload: API key not found"
          fi

      - name: 🔖 Git Tag + Release Notes
        run: |
          cd "$PROJECT_DIR"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          version="v$(date +%Y.%m.%d)-build-${{ github.run_number }}"
          echo "🔖 Creating Git tag $version"
          git tag "$version"
          git push origin "$version"
          echo "📋 Generating GitHub Release..."
          gh release create "$version" build_output/*.ipa --title "$version" --notes "✅ Automated build & TestFlight release by CI"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Compress Artifacts
        run: |
          cd "$PROJECT_DIR"
          mkdir -p ../artifacts
          zip -r ../artifacts/App.ipa.zip build_output/*.ipa || true
          zip -r ../artifacts/App.dSYM.zip build_output/*.dSYM || true

      - name: 📤 Upload Logs and Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-fastlane-artifacts
          path: |
            logs/
            artifacts/
