name: Xcode Full Build and Optional Upload

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  xcode-secure-build:
    runs-on: macos-13
    timeout-minutes: 90
    env:
      S3_KEY_PREFIX: ios_builds/${{ github.run_id }}

    steps:
      - name: ‚úÖ Checkout Code
        uses: actions/checkout@v4

      - name: üîí Prepare Secure Directories
        run: |
          mkdir -p build_output logs tmp config ruby_env json_output artifacts
          chmod 700 build_output logs tmp config ruby_env json_output artifacts

      - name: üìÅ Auto-Detect iOS Project Directory
        run: |
          if [ -d "./ios" ]; then cd ios
          elif [ -d "./MyApp" ]; then cd MyApp
          fi
          echo "PROJECT_DIR=$(pwd)" >> $GITHUB_ENV

      - name: üßæ System Snapshot
        run: |
          mkdir -p logs
          system_profiler SPSoftwareDataType > logs/system_snapshot.txt
          xcodebuild -version > logs/xcode_version.txt

      - name: üíé Install Ruby and Bundle
        run: |
          brew install rbenv ruby-build
          eval "$(rbenv init - bash)"
          rbenv install -s 3.2.2
          rbenv global 3.2.2
          gem install bundler
          if [ -f Gemfile ]; then
            bundle config set --local path 'vendor/bundle'
            bundle install
          fi
          ruby -v > logs/ruby_version.txt

      - name: üß™ Extract Default Scheme
        run: |
          cd "$PROJECT_DIR"
          mkdir -p json_output
          if ls *.xcodeproj >/dev/null 2>&1 || ls *.xcworkspace >/dev/null 2>&1; then
            scheme_list=$(xcodebuild -list -json 2>/dev/null | tr -d "\n")
            echo "$scheme_list" > json_output/scheme_list.json
            default=$(echo "$scheme_list" | ruby -rjson -e 'puts JSON.parse(STDIN.read)["project"]["targets"][0]')
            echo "$default" > default_scheme.txt
          else
            echo "‚ùå No Xcode project/workspace found."
            exit 1
          fi

      - name: üèó Build and Analyze
        run: |
          cd "$PROJECT_DIR"
          scheme=$(cat default_scheme.txt)

          if ls *.xcworkspace >/dev/null 2>&1; then
            filetype_parameter="workspace"
            file_to_build=$(ls *.xcworkspace | head -n 1)
          elif ls *.xcodeproj >/dev/null 2>&1; then
            filetype_parameter="project"
            file_to_build=$(ls *.xcodeproj | head -n 1)
          else
            echo "‚ùå No .xcodeproj or .xcworkspace found"
            exit 1
          fi

          echo "üì¶ Building $file_to_build with scheme $scheme"
          xcodebuild clean build analyze \
            -scheme "$scheme" \
            -"$filetype_parameter" "$file_to_build" \
            | tee logs/xcodebuild.log \
            | xcpretty

          exit ${PIPESTATUS[0]}

      - name: üì¶ Export and Zip Artifacts (Optional)
        run: |
          cd "$PROJECT_DIR"
          scheme=$(cat default_scheme.txt)

          if [ -z "${{ secrets.APPLE_TEAM_ID }}" ]; then
            echo "‚ö†Ô∏è APPLE_TEAM_ID not set. Skipping exportArchive step."
            exit 0
          fi

          echo '<?xml version="1.0" encoding="UTF-8"?>' > ExportOptions.plist
          echo '<plist version="1.0">' >> ExportOptions.plist
          echo '<dict>' >> ExportOptions.plist
          echo '  <key>method</key>' >> ExportOptions.plist
          echo '  <string>development</string>' >> ExportOptions.plist
          echo '  <key>compileBitcode</key>' >> ExportOptions.plist
          echo '  <false/>' >> ExportOptions.plist
          echo '  <key>signingStyle</key>' >> ExportOptions.plist
          echo '  <string>automatic</string>' >> ExportOptions.plist
          echo '  <key>stripSwiftSymbols</key>' >> ExportOptions.plist
          echo '  <true/>' >> ExportOptions.plist
          echo '  <key>teamID</key>' >> ExportOptions.plist
          echo "  <string>${{ secrets.APPLE_TEAM_ID }}</string>" >> ExportOptions.plist
          echo '</dict>' >> ExportOptions.plist
          echo '</plist>' >> ExportOptions.plist

          if ls *.xcworkspace >/dev/null 2>&1; then
            xcodebuild -workspace *.xcworkspace -scheme "$scheme" -sdk iphoneos -configuration Release -archivePath build_output/App.xcarchive archive
          else
            xcodebuild -project *.xcodeproj -scheme "$scheme" -sdk iphoneos -configuration Release -archivePath build_output/App.xcarchive archive
          fi

          xcodebuild -exportArchive -archivePath build_output/App.xcarchive \
            -exportOptionsPlist ExportOptions.plist \
            -exportPath build_output

          mkdir -p artifacts
          zip -r artifacts/App.ipa.zip build_output/*.ipa || true
          zip -r artifacts/App.app.zip build_output/*.app || true
          zip -r artifacts/App.dSYM.zip build_output/*.dSYM || true

      - name: ‚òÅÔ∏è Upload to AWS S3 (Optional)
        if: ${{ secrets.AWS_ACCESS_KEY_ID != '' && secrets.AWS_SECRET_ACCESS_KEY != '' && secrets.S3_BUCKET_NAME != '' }}
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl private --follow-symlinks
        env:
          AWS_S3_BUCKET: ${{ secrets.S3_BUCKET_NAME }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          SOURCE_DIR: ${{ github.workspace }}/$PROJECT_DIR/artifacts
          DEST_DIR: ${{ env.S3_KEY_PREFIX }}

      - name: üì§ Upload Logs and Build Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xcode-build-logs-and-artifacts
          path: |
            logs/
            ${{ github.workspace }}/$PROJECT_DIR/json_output/
            ${{ github.workspace }}/$PROJECT_DIR/build_output/
            ${{ github.workspace }}/$PROJECT_DIR/artifacts/
