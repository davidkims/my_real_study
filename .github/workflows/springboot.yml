name: Spring Boot Secure Install with Auto Directory & Healthcheck

on:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  security-events: write
  statuses: write

jobs:
  setup-spring-secure:
    runs-on: ubuntu-latest

    env:
      TIMESTAMP: ${{ github.run_id }}-${{ github.run_number }}

    steps:
      - name: ✅ 저장소 체크아웃
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ✅ 디렉토리 생성
        run: |
          mkdir -p .github/workflows/{ci,lint,security,deploy}
          mkdir -p backend/src/main/java/com/example
          mkdir -p backend/src/main/resources
          mkdir -p disk-slot/slot-${TIMESTAMP}/{logs,build,run,tmp}

      - name: ✅ 소스 파일 다운로드 (자동 백업 URL 포함)
        run: |
          set -e

          # 파일 정의
          declare -A FILES
          FILES["backend/pom.xml"]="https://your-primary-url.com/spring/pom.xml https://your-backup-url.com/spring/pom.xml"
          FILES["backend/src/main/resources/application.yml"]="https://your-primary-url.com/spring/application.yml https://your-backup-url.com/spring/application.yml"
          FILES["backend/src/main/java/com/example/Application.java"]="https://your-primary-url.com/spring/Application.java https://your-backup-url.com/spring/Application.java"

          for FILE in "${!FILES[@]}"; do
            URLS=${FILES[$FILE]}
            SUCCESS=0

            for URL in $URLS; do
              echo "⬇️ ${FILE} ← ${URL}"
              curl -sfL "$URL" -o "$FILE" || continue

              # HTML이면 실패 처리
              if grep -qi '<html' "$FILE"; then
                echo "⚠️ Invalid HTML content detected in $FILE from $URL"
                continue
              fi

              echo "✅ $FILE 다운로드 성공"
              SUCCESS=1
              break
            done

            if [ "$SUCCESS" -ne 1 ]; then
              echo "❌ $FILE 다운로드 실패 (모든 URL 시도 실패)"
              exit 1
            fi
          done

      - name: ✅ JDK & Maven 설치
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: ✅ Spring Boot 빌드
        run: |
          mvn clean package -DskipTests
          cp target/*.jar ../../disk-slot/slot-${TIMESTAMP}/build/
        working-directory: ./backend

      - name: ✅ 서버 실행
        run: |
          nohup java -jar disk-slot/slot-${TIMESTAMP}/build/*.jar > disk-slot/slot-${TIMESTAMP}/run/server.log 2>&1 &
          echo $! > disk-slot/slot-${TIMESTAMP}/run/server.pid

      - name: ✅ Health Check
        run: |
          for i in {1..10}; do
            sleep 5
            if curl -sf http://localhost:8080/actuator/health; then
              echo "✅ 서버 정상 작동"
              exit 0
            fi
          done
          echo "❌ 서버 Health Check 실패"
          exit 1

      - name: ✅ 디스크 및 프로세스 상태 기록
        run: |
          ps aux > disk-slot/slot-${TIMESTAMP}/logs/process.log
          df -h > disk-slot/slot-${TIMESTAMP}/logs/disk.log

      - name: ✅ CodeQL 초기화
        uses: github/codeql-action/init@v3
        with:
          languages: java

      - name: ✅ CodeQL 빌드
        run: mvn clean install -DskipTests
        working-directory: ./backend

      - name: ✅ CodeQL 분석 실행
        uses: github/codeql-action/analyze@v3

      - name: ✅ Scorecard CLI 실행
        run: |
          curl -L https://github.com/ossf/scorecard/releases/latest/download/scorecard-linux-amd64 -o scorecard
          chmod +x scorecard
          ./scorecard --repo=github.com/${{ github.repository }} --format=json > disk-slot/slot-${TIMESTAMP}/logs/scorecard.json
          ./scorecard --repo=github.com/${{ github.repository }} --format=sarif > disk-slot/slot-${TIMESTAMP}/logs/scorecard.sarif

      - name: ✅ Scorecard SARIF 업로드
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: disk-slot/slot-${TIMESTAMP}/logs/scorecard.sarif

      - name: ✅ 로그 아티팩트 업로드
        uses: actions/upload-artifact@v4
        with:
          name: spring-boot-secure-logs-${{ env.TIMESTAMP }}
          path: disk-slot/slot-${TIMESTAMP}/logs
