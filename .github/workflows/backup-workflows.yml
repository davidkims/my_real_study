name: Full System Automation with Backup, Test, and Reporting

on:
  push:
    branches:
      - main
  pull_request:
  schedule:
    - cron: '*/5 * * * *'
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  full-backup:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set timestamp (KST)
      id: vars
      run: |
        export TZ=Asia/Seoul
        echo "timestamp=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
        echo "date_fmt=$(date '+%Y-%m-%d %H:%M:%S (KST)')" >> $GITHUB_OUTPUT

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y apache2 unzip curl default-jdk libaio-dev gnupg

    - name: Prepare backup directories
      run: |
        mkdir -p apache_backups nt-backup/bin db_backups oracle_backups teradata_backups backups reports eai_backups edi_logs springboot springboot_backups maven_backups card_backups public/reports

    - name: Setup Spring Boot JAR
      run: |
        curl -L https://repo.spring.io/release/org/springframework/boot/spring-boot-samples/2.7.3/spring-boot-samples-2.7.3.jar -o springboot/app.jar
        echo "java -jar $(pwd)/springboot/app.jar" > springboot/run.sh
        chmod +x springboot/run.sh

    - name: Generate .env and application.yml
      run: |
        echo "APP_ENV=production" > springboot/.env
        mkdir -p springboot/src/main/resources
        printf "spring:\n  application:\n    name: SampleApp\n  server:\n    port: 8080\n" > springboot/src/main/resources/application.yml

    - name: Install Maven
      run: |
        curl -LO https://downloads.apache.org/maven/maven-3/3.9.6/binaries/apache-maven-3.9.6-bin.zip
        unzip apache-maven-3.9.6-bin.zip -d ./maven_backups
        mv maven_backups/apache-maven-3.9.6 maven_backups/maven-${{ steps.vars.outputs.timestamp }}
        echo "$(pwd)/maven_backups/maven-${{ steps.vars.outputs.timestamp }}/bin" >> $GITHUB_PATH

    - name: Test Maven
      run: mvn --version

    - name: Run Spring Boot for test
      run: |
        nohup java -jar springboot/app.jar > springboot/run.log 2>&1 &
        sleep 10
        curl -s http://localhost:8080 || echo "No default route"
        pkill -f 'springboot/app.jar' || true

    - name: Backup Artifacts
      run: |
        cp springboot/app.jar springboot_backups/app-${{ steps.vars.outputs.timestamp }}.jar
        zip -r backups/workflows-backup-${{ steps.vars.outputs.timestamp }}.zip .github/workflows

    - name: Simulate and Encrypt Logistics Customer DB
      run: |
        echo "-- 물류 고객 가상 백업 (주민번호 마스킹 적용)" > db_temp.sql
        echo "CREATE TABLE customers (id INT, name TEXT, phone TEXT, ssn TEXT);" >> db_temp.sql
        echo "INSERT INTO customers VALUES (1, '홍길동', '010-1234-5678', '900101-*******');" >> db_temp.sql
        echo "INSERT INTO customers VALUES (2, '김철수', '010-9876-5432', '920305-*******');" >> db_temp.sql
        gpg --batch --yes --passphrase "secret" -c db_temp.sql
        mv db_temp.sql.gpg db_backups/db-backup-${{ steps.vars.outputs.timestamp }}.sql.gpg

    - name: Oracle DB Backup (encrypted)
      run: |
        echo "-- Oracle DB Export (simulated)" > oracle.dmp
        echo "EXPORT_DATE=${{ steps.vars.outputs.date_fmt }}" >> oracle.dmp
        gpg --batch --yes --passphrase "secret" -c oracle.dmp
        mv oracle.dmp.gpg oracle_backups/oracle-backup-${{ steps.vars.outputs.timestamp }}.dmp.gpg

    - name: Teradata Resident Batch Backup
      run: |
        echo "-- Teradata 상주배치 백업" > teradata_temp.sql
        echo "EXPORT_DATE=${{ steps.vars.outputs.date_fmt }}" >> teradata_temp.sql
        echo "CUSTOMER_ID, NAME, CARD, SSN" >> teradata_temp.sql
        echo "1001, '이영희', '4579-****-****-1234', '800101-*******'" >> teradata_temp.sql
        gpg --batch --yes --passphrase "secret" -c teradata_temp.sql
        mv teradata_temp.sql.gpg teradata_backups/td-backup-${{ steps.vars.outputs.timestamp }}.sql.gpg

    - name: Card System Customer Backup (Masked + Encrypted)
      run: |
        echo "-- 체크카드 고객 데이터 백업 (마스킹 및 암호화)" > card_temp.sql
        echo "CREATE TABLE card_users (id INT, name TEXT, card_number TEXT, ssn TEXT);" >> card_temp.sql
        echo "INSERT INTO card_users VALUES (1, '박민수', '4579-****-****-9876', '850305-*******');" >> card_temp.sql
        echo "INSERT INTO card_users VALUES (2, '최윤아', '4579-****-****-4567', '870721-*******');" >> card_temp.sql
        gpg --batch --yes --passphrase "secret" -c card_temp.sql
        mv card_temp.sql.gpg card_backups/card-backup-${{ steps.vars.outputs.timestamp }}.sql.gpg

    - name: Simulate EAI + EDI logs
      run: |
        echo "<msg><status>OK</status></msg>" > eai_backups/send-${{ steps.vars.outputs.timestamp }}.xml
        echo "<msg><status>OK</status></msg>" > eai_backups/receive-${{ steps.vars.outputs.timestamp }}.xml
        echo "$(date) 송신 완료" >> edi_logs/send.log
        echo "$(date) 수신 완료" >> edi_logs/receive.log

    - name: Analyze EAI logs
      id: eai
      run: |
        send_status=$(grep -oP '<status>\K[^<]+' eai_backups/send-${{ steps.vars.outputs.timestamp }}.xml)
        recv_status=$(grep -oP '<status>\K[^<]+' eai_backups/receive-${{ steps.vars.outputs.timestamp }}.xml)
        echo "send_status=$send_status" >> $GITHUB_OUTPUT
        echo "recv_status=$recv_status" >> $GITHUB_OUTPUT

    - name: Resource Usage
      id: sys
      run: |
        echo "cpu=$(top -bn1 | grep 'Cpu(s)' | awk '{print $2 + $4}')" >> $GITHUB_OUTPUT
        echo "memory=$(free | awk '/Mem/ {printf(\"%.2f\", $3/$2 * 100)}')" >> $GITHUB_OUTPUT
        echo "disk=$(df -h . | awk 'NR==2 {print $5}')" >> $GITHUB_OUTPUT

    - name: Cleanup Old Backups (24h)
      run: |
        find backups db_backups oracle_backups teradata_backups card_backups apache_backups nt-backup reports eai_backups springboot_backups edi_logs -type f -mmin +1440 -exec rm -v {} \;
        find maven_backups -depth -type d -mmin +1440 -exec rm -rv {} \;

    - name: Create Monitoring Report
      run: |
        REPORT=public/reports/report-${{ steps.vars.outputs.timestamp }}.md
        echo "# 📦 백업 리포트 (${{ steps.vars.outputs.date_fmt }})" > $REPORT
        echo "- Spring Boot: ✅" >> $REPORT
        echo "- Maven: ✅" >> $REPORT
        echo "- Oracle DB (암호화됨): ✅" >> $REPORT
        echo "- 물류 고객 DB (마스킹+암호화): ✅" >> $REPORT
        echo "- Teradata 상주배치 백업: ✅" >> $REPORT
        echo "- 체크카드 시스템 고객 데이터: ✅" >> $REPORT
        echo "## EAI + EDI 상태" >> $REPORT
        echo "- 송신: \\`OK\\`" >> $REPORT
        echo "- 수신: \\`OK\\`" >> $REPORT
        echo "## 시스템 자원율" >> $REPORT
        echo "- CPU: \\`${{ steps.sys.outputs.cpu }}%\\`" >> $REPORT
        echo "- Memory: \\`${{ steps.sys.outputs.memory }}%\\`" >> $REPORT
        echo "- Disk: \\`${{ steps.sys.outputs.disk }}\\`" >> $REPORT
        echo "\n[🔍 백업 대시보드로 이동](../index.html)" >> $REPORT

    - name: Commit Report
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git pull origin main
        git add public/reports/*.md springboot_backups maven_backups db_backups oracle_backups teradata_backups card_backups backups eai_backups edi_logs
        git commit -m "📦 Backup + Report @ ${{ steps.vars.outputs.timestamp }}" || echo "Nothing to commit"
        git push origin main

  deploy:
    needs: full-backup
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
        fetch-depth: 0

    - name: Setup Hugo
      uses: peaceiris/actions-hugo@v2
      with:
        hugo-version: '0.110.0'

    - name: Build Monitoring Page
      run: |
        mkdir -p public
        echo "<html><head><meta charset='utf-8'><title>📦 Backup Monitor</title></head><body><h1>📦 백업 시스템 모니터링 (24시간/365일)</h1><ul>" > public/index.html
        for f in public/reports/*.md; do
          fname=$(basename "$f")
          echo "<li><a href='./reports/$fname'>$fname</a></li>" >> public/index.html
        done
        echo "</ul><hr><p>이 페이지는 5분마다 자동 업데이트됩니다.</p>" >> public/index.html
        echo "<h2>EDI 로그 상태</h2>" >> public/index.html
        echo "<pre>" >> public/index.html
        tail -n 10 edi_logs/send.log >> public/index.html || true
        tail -n 10 edi_logs/receive.log >> public/index.html || true
        echo "</pre></body></html>" >> public/index.html

    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./public
