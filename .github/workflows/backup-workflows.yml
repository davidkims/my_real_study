name: Full Infra Setup and Backup Automation

on:
  workflow_dispatch:
  schedule:
    - cron: '0 * * * *'

permissions:
  contents: write

jobs:
  infra-backup:
    runs-on: ubuntu-latest

    steps:
      - name: 📦 Checkout
        uses: actions/checkout@v4

      - name: ⚙️ Install System Packages
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            curl gnupg unzip default-jdk \
            apache2 libaio-dev \
            odbcinst unixodbc libodbccr2 libodbc2

      - name: 🕗 Set UTC + KST Time
        id: timestamp
        run: |
          echo "utc=$(date -u +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
          echo "kst=$(TZ=Asia/Seoul date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT

      - name: 📂 Create Directories for All Services
        run: |
          mkdir -p \
            teradata_backups swift_backups apache_backups \
            springboot springboot_backups java_backups \
            db_backups swift_send swift_receive apache_www logs /davidkims/my_real_study

      # Apache Setup
      - name: 🔧 Apache Installation Verification
        run: |
          sudo systemctl start apache2
          echo "<h1>Hello from Apache</h1>" | sudo tee apache_www/index.html
          sudo cp -r apache_www/* /var/www/html/
          curl -s http://localhost || echo "Apache not responding"
          tar -czf apache_backups/apache-html-${{ steps.timestamp.outputs.kst }}.tar.gz /var/www/html

      # Swift File Simulation
      - name: 📄 Swift Send/Receive Files
        run: |
          echo '<Swift><Tx>SEND</Tx><Status>OK</Status></Swift>' > swift_send/send-${{ steps.timestamp.outputs.kst }}.xml
          echo '<Swift><Tx>RECEIVE</Tx><Status>OK</Status></Swift>' > swift_receive/receive-${{ steps.timestamp.outputs.kst }}.xml
          zip -j swift_backups/swift-${{ steps.timestamp.outputs.kst }}.zip swift_send/* swift_receive/*

      # Spring Boot Setup
      - name: 🌟 Spring Boot Installation & Test
        run: |
          curl -L https://repo.spring.io/release/org/springframework/samples/spring-petclinic/2.7.3/spring-petclinic-2.7.3.jar \
            -o springboot/app.jar
          echo 'java -jar $(pwd)/springboot/app.jar' > springboot/run.sh
          chmod +x springboot/run.sh
          nohup java -jar springboot/app.jar > springboot/run.log 2>&1 &
          sleep 10
          curl -s http://localhost:8080 || echo "SpringBoot not responding"
          pkill -f 'springboot/app.jar' || true
          cp springboot/app.jar springboot_backups/app-${{ steps.timestamp.outputs.kst }}.jar

      # Java WAR/JAR Backup
      - name: ☕ Java WAR/JAR Packaging
        run: |
          mkdir -p java_src
          echo 'public class Hello { public static void main(String[] args) { System.out.println("Hello, World!"); } }' > java_src/Hello.java
          javac java_src/Hello.java
          jar cf hello.jar -C java_src .
          cp hello.jar java_backups/hello-${{ steps.timestamp.outputs.kst }}.jar
          zip -r java_backups/java-src-${{ steps.timestamp.outputs.kst }}.zip java_src

      # DB Dump Simulation + Encryption
      - name: 📊 Database Dump + Encrypt
        run: |
          echo '-- DB Backup' > db.sql
          echo 'CREATE TABLE logs (id INT, message TEXT);' >> db.sql
          echo "INSERT INTO logs VALUES (1, '백업 실행');" >> db.sql
          gpg --batch --yes --passphrase "secret" -c db.sql
          mv db.sql.gpg db_backups/db-${{ steps.timestamp.outputs.kst }}.sql.gpg

      # Final Log Display + Copy Results
      - name: 📈 Copy All Backup Results to /davidkims/my_real_study
        run: |
          cp -r apache_backups swift_backups springboot_backups java_backups db_backups /davidkims/my_real_study/
          echo "Results copied to /davidkims/my_real_study"
          ls -lh /davidkims/my_real_study
