name: Full Backup and Preparation Workflow

on:
  schedule:
    - cron: '0 21 * * 0'
    - cron: '10 21 * * 0'
    - cron: '20 21 * * 0'
    - cron: '30 21 * * 0'
    - cron: '40 21 * * 0'
    - cron: '50 21 * * 0'
  workflow_dispatch:

permissions:
  contents: write
  id-token: write
  pages: write

jobs:
  cleanup-and-prepare:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Initialize Markdown Report
        run: |
          echo "# 📦 Backup Report - $(date '+%Y-%m-%d %H:%M:%S')" > backup-report.md
          echo "" >> backup-report.md
          echo "## 💾 Initial Disk Usage" >> backup-report.md
          df -h >> backup-report.md

      - name: Delete Existing Backup Files in .github/workflows
        run: |
          echo "🧹 기존 백업 파일 삭제 시작" | tee -a backup-report.md
          find .github/workflows -type f -name '*backup*' -exec rm -v {} + | tee -a backup-report.md || true
          rm -f .github/workflows/backup_files.zip || true
          echo "✅ 기존 백업 파일 삭제 완료" | tee -a backup-report.md

      - name: Create Directories and Maximize Disk Capacity
        run: |
          sudo mkdir -p /opt/backup/{sql,teradata,nt,apache,swift,homebrew,symantec,uploads,transactions,ledger}
          sudo fallocate -l 10G /opt/backup/.reserve_space || sudo dd if=/dev/zero of=/opt/backup/.reserve_space bs=1M count=10240
          sudo chmod -R 777 /opt/backup
          echo "✅ 디스크 최대 용량 확보 및 디렉토리 준비 완료" | tee -a backup-report.md
          echo "\n## 📦 Disk Usage After Directory Setup" >> backup-report.md
          df -h >> backup-report.md

      - name: Backup Resource Downloads
        run: |
          echo -e "\n## 🔧 Backup Resource Downloads" >> backup-report.md
          mkdir -p /opt/backup/uploads

          declare -A FILE_URLS
          FILE_URLS[mysql-backup-template.sql]="https://raw.githubusercontent.com/davidkims/backup-assets/main/mysql-backup-template.sql"
          FILE_URLS[httpd-backup.conf]="https://raw.githubusercontent.com/davidkims/backup-assets/main/httpd-backup.conf"
          FILE_URLS[swift-template.xml]="https://raw.githubusercontent.com/davidkims/backup-assets/main/swift-template.xml"
          FILE_URLS[netbackup-init.xml]="https://raw.githubusercontent.com/davidkims/backup-assets/main/netbackup-init.xml"
          FILE_URLS[brew-packages.txt]="https://raw.githubusercontent.com/davidkims/backup-assets/main/brew-packages.txt"

          for FILE in "${!FILE_URLS[@]}"; do
            URL="${FILE_URLS[$FILE]}"
            if curl -fsSL "$URL" -o "/opt/backup/uploads/$FILE"; then
              echo "- \`$FILE\`: ✅ 다운로드 성공" >> backup-report.md
            else
              echo "- \`$FILE\`: ❌ 다운로드 실패 (시뮬레이션 처리됨)" >> backup-report.md
              echo "[simulated content]" > /opt/backup/uploads/$FILE
              echo "⚠️ 404 오류 발생: $URL" >> backup-report.md
            fi
          done

          echo "✅ 리소스 다운로드 또는 시뮬레이션 완료" >> backup-report.md

      - name: Simulate Financial Transaction Ledger Generation
        run: |
          echo -e "\n## 💳 금융 거래 원장 생성" >> backup-report.md
          mkdir -p /opt/backup/ledger
          CSV_PATH="/opt/backup/ledger/transaction-ledger.csv"
          echo "고객ID,이름,거래종류,금액,통화,시간" > "$CSV_PATH"

          for i in {1..10}; do
            CUST_ID="CUST$(printf '%03d' $i)"
            NAME="홍길동$i"
            TYPES=(checkcard creditcard FX 환율)
            TYPE="${TYPES[$((RANDOM % 4))]}"
            AMOUNT=$(( (RANDOM % 491) * 1000 + 10000 ))
            CURRENCY="KRW"
            TIME=$(date '+%Y-%m-%d %H:%M:%S')
            echo "$CUST_ID,$NAME,$TYPE,$AMOUNT,$CURRENCY,$TIME" >> "$CSV_PATH"
          done

          cp "$CSV_PATH" /opt/backup/uploads/transaction-ledger.csv
          echo "✅ 거래 원장 생성 완료" >> backup-report.md

      - name: Summarize Transaction Ledger Statistics
        run: |
          echo -e "\n## 📊 거래 통계 요약" >> backup-report.md
          TOTAL=$(tail -n +2 /opt/backup/ledger/transaction-ledger.csv | wc -l)
          SUM=$(tail -n +2 /opt/backup/ledger/transaction-ledger.csv | awk -F',' '{sum+=$4} END {print sum}')
          AVG=$(tail -n +2 /opt/backup/ledger/transaction-ledger.csv | awk -F',' '{sum+=$4} END {if (NR>0) print int(sum/NR); else print 0}')

          echo "- 총 거래 수: $TOTAL건" >> backup-report.md
          echo "- 총 거래 금액: ₩$SUM" >> backup-report.md
          echo "- 평균 거래 금액: ₩$AVG" >> backup-report.md

      - name: Upload Assets to GitHub Release (if GH_TOKEN and tag exist)
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: nightly-backup
          files: |
            /opt/backup/uploads/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Fallback Private Authenticated Download Simulation
        run: |
          echo -e "\n## 🔐 GitHub Private Access Simulation" >> backup-report.md
          echo "GITHUB_TOKEN 존재 여부: ${{ secrets.GITHUB_TOKEN != '' }}" >> backup-report.md
          echo "(실제 다운로드 인증 필요 시 curl -H 'Authorization: token $GITHUB_TOKEN')" >> backup-report.md

      - name: Compress and Upload Backup Files to .github/workflows
        run: |
          zip -r .github/workflows/backup_files.zip /opt/backup backup-report.md
          echo "✅ 백업 파일 및 보고서 압축 완료" | tee -a backup-report.md

      - name: List Final Backup Artifact
        run: |
          ls -lh .github/workflows/backup_files.zip | tee -a backup-report.md

      - name: Upload Markdown Report
        uses: actions/upload-artifact@v4
        with:
          name: backup-markdown-report
          path: backup-report.md
