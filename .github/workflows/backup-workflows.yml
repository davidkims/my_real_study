name: Full Backup with EAI Analysis

on:
  schedule:
    - cron: '0 23 * * *'  # Îß§Ïùº Ïò§Ï†Ñ 8Ïãú (KST)
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  full-backup:
    name: System Install, Backup, and EAI Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set timestamp
        id: vars
        run: |
          echo "timestamp=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
          echo "date_fmt=$(date '+%Y-%m-%d %H:%M:%S (KST)')" >> $GITHUB_OUTPUT

      - name: Install Apache
        run: |
          sudo apt-get update
          sudo apt-get install -y apache2 apache2-utils

      - name: Setup Apache authentication
        run: |
          sudo mkdir -p /etc/apache2/auth
          sudo htpasswd -bc /etc/apache2/auth/.htpasswd admin password123
          echo '<Directory "/var/www/html">' | sudo tee /etc/apache2/conf-available/auth.conf
          echo '  AuthType Basic' | sudo tee -a /etc/apache2/conf-available/auth.conf
          echo '  AuthName "Restricted"' | sudo tee -a /etc/apache2/conf-available/auth.conf
          echo '  AuthUserFile /etc/apache2/auth/.htpasswd' | sudo tee -a /etc/apache2/conf-available/auth.conf
          echo '  Require valid-user' | sudo tee -a /etc/apache2/conf-available/auth.conf
          echo '</Directory>' | sudo tee -a /etc/apache2/conf-available/auth.conf
          sudo a2enconf auth
          sudo systemctl restart apache2

      - name: Create directories
        run: |
          mkdir -p apache_backups nt-backup/bin db_backups backups storage/logs storage/tmp storage/data reports eai_backups

      - name: Backup Apache configuration
        run: |
          sudo cp -r /etc/apache2 apache_backups/etc_apache2_${{ steps.vars.outputs.timestamp }}
          echo "Apache configuration backup completed." > apache_backups/apache-copy-${{ steps.vars.outputs.timestamp }}.log

      - name: Simulate NT Backup
        run: |
          echo "#!/bin/bash\necho 'NT Backup service running...'" > nt-backup/bin/ntbackup
          chmod +x nt-backup/bin/ntbackup
          echo "NT Backup initialized at ${{ steps.vars.outputs.date_fmt }}" > nt-backup/nt-service-${{ steps.vars.outputs.timestamp }}.log

      - name: Backup workflows
        run: |
          zip -r "backups/workflows-backup-${{ steps.vars.outputs.timestamp }}.zip" .github/workflows

      - name: Simulate DB backup
        run: |
          echo "-- Daily DB dump" > db_backups/db-backup-${{ steps.vars.outputs.timestamp }}.sql
          echo "CREATE TABLE log (id INT);" >> db_backups/db-backup-${{ steps.vars.outputs.timestamp }}.sql

      - name: Simulate EAI ÏÜ°ÏàòÏã† Î°úÍ∑∏
        run: |
          echo "<msg><status>OK</status><payload>Hello</payload></msg>" > eai_backups/eai-send-${{ steps.vars.outputs.timestamp }}.xml
          echo "<msg><status>FAIL</status><payload>Error</payload></msg>" > eai_backups/eai-receive-${{ steps.vars.outputs.timestamp }}.xml

      - name: Analyze EAI Logs
        id: eai
        run: |
          send_status=$(grep -o '<status>[^<]*</status>' eai_backups/eai-send-${{ steps.vars.outputs.timestamp }}.xml | sed 's/<[^>]*>//g')
          receive_status=$(grep -o '<status>[^<]*</status>' eai_backups/eai-receive-${{ steps.vars.outputs.timestamp }}.xml | sed 's/<[^>]*>//g')
          echo "send_status=$send_status" >> $GITHUB_OUTPUT
          echo "receive_status=$receive_status" >> $GITHUB_OUTPUT

      - name: Clean up backups older than 2 days
        run: |
          find backups -type f -mtime +2 -exec rm -v {} \;
          find db_backups -type f -mtime +2 -exec rm -v {} \;
          find apache_backups -type f -mtime +2 -exec rm -v {} \;
          find nt-backup -type f -mtime +2 -exec rm -v {} \;
          find reports -type f -mtime +2 -exec rm -v {} \;
          find eai_backups -type f -mtime +2 -exec rm -v {} \;

      - name: Generate Markdown report
        run: |
          REPORT="reports/backup-report-${{ steps.vars.outputs.timestamp }}.md"
          echo "# üóÇÔ∏è Backup Report - ${{ steps.vars.outputs.date_fmt }}" > $REPORT
          echo "" >> $REPORT
          echo "## ‚úÖ Apache" >> $REPORT
          echo "- Configuration backed up." >> $REPORT
          echo "" >> $REPORT
          echo "## üíæ DB Backup" >> $REPORT
          echo "- File: db-backups/db-backup-${{ steps.vars.outputs.timestamp }}.sql" >> $REPORT
          echo "" >> $REPORT
          echo "## üîÑ EAI ÏÜ°ÏàòÏã† Î°úÍ∑∏" >> $REPORT
          echo "- ÏÜ°Ïã† ÏÉÅÌÉú: `${{ steps.eai.outputs.send_status }}`" >> $REPORT
          echo "- ÏàòÏã† ÏÉÅÌÉú: `${{ steps.eai.outputs.receive_status }}`" >> $REPORT
          if [ "${{ steps.eai.outputs.receive_status }}" != "OK" ]; then
            echo "- ‚ö†Ô∏è ÏàòÏã† Ïò§Î•ò Î∞úÏÉù!" >> $REPORT
          fi
          echo "" >> $REPORT
          echo "## üßπ Î≥¥Í¥Ä Ï£ºÍ∏∞" >> $REPORT
          echo "- 2Ïùº Ïù¥ÏÉÅÎêú Î∞±ÏóÖ ÏûêÎèô ÏÇ≠Ï†úÎê®" >> $REPORT
          echo "" >> $REPORT
          echo "_Generated by GitHub Actions_" >> $REPORT

      - name: Commit and push
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git pull origin ${{ github.ref_name }}
          git add reports/*.md nt-backup/ apache_backups/ db_backups/ backups/ eai_backups/
          git commit -m "üì¶ Backup + EAI Î∂ÑÏÑù ÏôÑÎ£å: ${{ steps.vars.outputs.timestamp }}" || echo "Nothing to commit"
          git push origin ${{ github.ref_name }}

  deploy-pages:
    needs: full-backup
    runs-on: ubuntu-latest
    if: ${{ github.ref_name == 'main' }}

    steps:
      - uses: actions/checkout@v4

      - name: Prepare GitHub Pages content
        run: |
          mkdir -p public
          cp -r reports/* public/

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
